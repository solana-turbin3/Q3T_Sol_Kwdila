[
  {
    "id": "anchor_001",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "make.rs",
    "code_snippet": "#[derive(Accounts)]\n#[instruction(seed:u64)]\npub struct Make<'info> {\n    #[account(mut)]\n    pub maker: Signer<'info>,\n    pub mint_a: InterfaceAccount<'info, Mint>,\n    pub mint_b: InterfaceAccount<'info, Mint>,\n\n    #[account(mut, associated_token::mint = mint_a, associated_token::authority = maker)]\n    pub maker_ata_a: InterfaceAccount<'info, TokenAccount>,\n\n    #[account(\n        init,payer = maker,\n        space = 8 + Escrow::INIT_SPACE,\n        seeds = [\n            b\"escrow\",\n            maker.key().as_ref(),\n            seed.to_le_bytes().as_ref()\n        ],\n        bump\n    )]\n    pub escrow: Account<'info, Escrow>,\n\n    #[account(\n        init,\n        seeds=[\n            b\"escrow_vault\",\n            escrow.key().to_bytes().as_ref(),\n        ],\n        payer = maker,\n        token::authority = escrow,\n        token::mint = mint_a,\n        bump\n    )]\n    pub vault: InterfaceAccount<'info, TokenAccount>,\n    pub system_program: Program<'info, System>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub token_program: Interface<'info, TokenInterface>\n}",
    "comments": "// This struct is an anchor context that holds necessary accounts for make instructions",
    "dependencies": ["Escrow", "derive", "instruction"],
    "line_numbers": [9, 47],
    "docstring": "a make anchor Context to Initiate and transfer into Escrow PDA",
    "related_functions": []
  },
  {
    "id": "anchor_002",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "make.rs",
    "code_snippet": "pub fn initialize_escrow(\n        &mut self,\n        seed: u64,\n        recieve_amount: u64,\n        duration: u64,\n        is_mutable: bool,\n        bumps: MakeBumps,\n    ) -> Result<()> {\n        self.escrow.set_inner(Escrow {\n            seed,\n            maker: self.maker.key(),\n            mint_a: self.mint_a.key(),\n            mint_b: self.mint_b.key(),\n            recieve_amount,\n            expiry: 0,\n            is_mutable,\n            escrow_bump: bumps.escrow,\n            vault_bump: bumps.vault,\n        });\n        self.escrow.set_expiry_relative(duration)?;\n        Ok(())\n}",
    "comments": "// This function initializes a PDA account of type Escrow for a Signer called 'maker'",
    "dependencies": ["Make", "set_expiry_relative"],
    "line_numbers": [49, 70],
    "docstring": "Initiate Escrow pda for solana escrow program.",
    "related_functions": ["deposit_into_vault"]
  },
  {
    "id": "anchor_003",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "make.rs",
    "code_snippet": "pub fn deposit_into_escrow(&mut self) -> Result<()> {\n        let accounts = TransferChecked {\n            from: self.maker_ata_a.to_account_info(),\n            mint: self.mint_a.to_account_info(),\n            to: self.vault.to_account_info(),\n            authority: self.escrow.to_account_info(),\n        };\n\n        let ctx = CpiContext::new(self.token_program.to_account_info(), accounts);\n\n        transfer_checked(ctx, self.escrow.recieve_amount, self.mint_a.decimals)?;\n        Ok(())\n    }",
    "comments": "// This function transfers tokens from maker_ata associated token account into a vault owned by the escrow PDA",
    "dependencies": ["Make", "transfer_checked"],
    "line_numbers": [71, 83],
    "docstring": "Transfer tokens from an associated token account into a vault with PDA authority",
    "related_functions": ["initiate_escrow"]
  },
  {
    "id": "anchor_004",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "escrow.rs",
    "code_snippet": "#[account]\n#[derive(InitSpace)]\npub struct Escrow {\n    pub seed: u64,\n    pub maker: Pubkey,\n    pub mint_a: Pubkey,\n    pub mint_b: Pubkey,\n    pub recieve_amount: u64,\n    pub expiry: u64,\n    pub is_mutable: bool,\n    pub escrow_bump: u8,\n    pub vault_bump: u8,\n}\nimpl Escrow {\n    // 8 bytes discriminator, 32 bytes Pubkey, 8 bytes u64, 1 byte u8, 1 byte bool;\n    pub const LEN: usize = 8 + 3 * 32 + 3 * 8 + 3 * 1 + 1;\n\n    pub fn check_expiry(&self) -> Result<()> {\n        require!(self.expiry > Clock::get()?.slot, EscrowError::Expired);\n        Ok(())\n    }\n\n    pub fn set_expiry_relative(&mut self, expiry: u64) -> Result<()> {\n        require!(expiry.lt(&100_000), EscrowError::MaxExpiryExceeded);\n        self.set_expiry_absolute(match expiry > 0 {\n            true => Clock::get()?.slot + expiry,\n            false => 0,\n        });\n        Ok(())\n    }\n\n    pub fn set_expiry_absolute(&mut self, expiry: u64) {\n        self.expiry = expiry;\n    }\n}",
    "comments": "// This struct is an anchor account representing an Escrow PDA",
    "dependencies": ["account macro", "derive"],
    "line_numbers": [5, 40],
    "docstring": "Escrow pda for anchor escrow program.",
    "related_functions": []
  },
  {
    "id": "anchor_005",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "take.rs",
    "code_snippet": "#[derive(Accounts)]\npub struct Take<'info> {\n    #[account(mut)]\n    pub maker: SystemAccount<'info>,\n    #[account(mut)]\n    pub taker: Signer<'info>,\n\n    pub mint_a: InterfaceAccount<'info, Mint>,\n    pub mint_b: InterfaceAccount<'info, Mint>,\n\n    #[account(mut, associated_token::mint = mint_a, associated_token::authority = maker)]\n    pub maker_ata_a: InterfaceAccount<'info, TokenAccount>,\n    #[account(init_if_needed, payer = taker, associated_token::mint = mint_b, associated_token::authority = maker)]\n    pub maker_ata_b: InterfaceAccount<'info, TokenAccount>,\n\n    #[account(init_if_needed, payer = taker, associated_token::mint = mint_a, associated_token::authority = taker)]\n    pub taker_ata_a: InterfaceAccount<'info, TokenAccount>,\n    #[account(mut, associated_token::mint = mint_b, associated_token::authority = taker)]\n    pub taker_ata_b: InterfaceAccount<'info, TokenAccount>,\n\n    #[account(\n        mut,\n        seeds = [\n            b\"escrow\",\n            escrow.maker.as_ref(),\n            escrow.seed.to_le_bytes().as_ref()\n        ],\n        bump = escrow.escrow_bump\n    )]\n    pub escrow: Account<'info, Escrow>,\n\n    pub vault: InterfaceAccount<'info, TokenAccount>,\n    pub system_program: Program<'info, System>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub token_program: Interface<'info, TokenInterface>,\n}",
    "comments": "// This struct is an anchor context that holds necessary accounts for take instructions",
    "dependencies": ["Escrow", "derive", "instruction"],
    "line_numbers": [10, 45],
    "docstring": "a take anchor Context to settle an escrow contract and transfer out of Escrow PDA into the maker and taker associated token accounts",
    "related_functions": []
  },
  {
    "id": "anchor_006",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "take.rs",
    "code_snippet": "pub fn check_expiry(&self) -> Result<()> {\n        self.escrow.check_expiry()\n    }",
    "comments": "// This function checks if the escrow contract has expired according to the previously set slot",
    "dependencies": ["take", "Escrow.check_expiry"],
    "line_numbers": [48, 50],
    "docstring": "check Escrow pda for expiry slot and compare to current slot",
    "related_functions": [
      "send_to_maker",
      "withdrawl_from_vault",
      "close_vault"
    ]
  },
  {
    "id": "anchor_007",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "take.rs",
    "code_snippet": "pub fn send_to_maker(&mut self) -> Result<()> {\n        let accounts = TransferChecked {\n            from: self.taker_ata_b.to_account_info(),\n            mint: self.mint_b.to_account_info(),\n            to: self.maker_ata_b.to_account_info(),\n            authority: self.taker.to_account_info(),\n        };\n\n        let ctx = CpiContext::new(self.system_program.to_account_info(), accounts);\n\n        transfer_checked(ctx, self.escrow.recieve_amount, self.mint_a.decimals)?;\n\n        Ok(())\n    }",
    "comments": "// This function transfers mint_b tokens from taker ata to maker ata according to the receive amount set during initiation",
    "dependencies": [
      "Take",
      "transfer_checked",
      "CpiContext::new",
      "TransferChecked"
    ],
    "line_numbers": [51, 64],
    "docstring": "Transfer spl or token22 tokens from one user to another.",
    "related_functions": ["withdraw_from_vault"]
  },
  {
    "id": "anchor_008",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "take.rs",
    "code_snippet": "pub fn withdraw_from_vault(&mut self) -> Result<()> {\n        let accounts = TransferChecked {\n            from: self.vault.to_account_info(),\n            mint: self.mint_a.to_account_info(),\n            to: self.taker_ata_a.to_account_info(),\n            authority: self.escrow.to_account_info(),\n        };\n\n        let escrow_seed = self.escrow.seed.to_le_bytes();\n        let seeds = [\n            b\"escrow\",\n            self.escrow.maker.as_ref(),\n            escrow_seed.as_ref(),\n            &[self.escrow.escrow_bump],\n        ];\n        let signer_seeds: &[&[&[u8]]] = &[&seeds[..]];\n\n        let ctx = CpiContext::new_with_signer(\n            self.system_program.to_account_info(),\n            accounts,\n            signer_seeds,\n        );\n\n        transfer_checked(ctx, self.escrow.recieve_amount, self.mint_a.decimals)?;\n        Ok(())\n    }",
    "comments": "// This function transfers mint_a tokens from escrow vault to taker ata",
    "dependencies": [
      "Take",
      "transfer_checked",
      "CpiContext::new_with_signer",
      "TransferChecked"
    ],
    "line_numbers": [65, 90],
    "docstring": "Transfer spl or token22 tokens from PDA owned token account interface to user ata.",
    "related_functions": ["send_to_maker"]
  },
  {
    "id": "anchor_009",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "take.rs",
    "code_snippet": "pub fn close_vault(&self) -> Result<()> {\n        let cpi_accounts = CloseAccount {\n            account: self.vault.to_account_info(),\n            destination: self.taker.to_account_info(),\n            authority: self.escrow.to_account_info(),\n        };\n\n        // use binding to prevent temporary value from being dropped\n        let maker_key = self.maker.key();\n        // use binding to prevent temporary value from being dropped\n        let escrow_seed = self.escrow.seed.to_le_bytes();\n\n        let signer_seeds = &[\n            b\"escrow\",\n            maker_key.as_ref(),\n            escrow_seed.as_ref(),\n            &[self.escrow.escrow_bump],\n        ];\n        let binding = [&signer_seeds[..]];\n\n        let ctx = CpiContext::new_with_signer(\n            self.token_program.to_account_info(),\n            cpi_accounts,\n            &binding,\n        );\n\n        close_account(ctx)\n    }",
    "comments": "// This function closes a PDA owned token account interface",
    "dependencies": [
      "Take",
      "close_account",
      "CpiContext::new_with_signer",
      "CloseAccount"
    ],
    "line_numbers": [91, 118],
    "docstring": "Close PDA owned token account",
    "related_functions": ["send_to_maker", "withdraw_from_vault"]
  },
  {
    "id": "anchor_010",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "cancel.rs",
    "code_snippet": "#[derive(Accounts)]\npub struct Take<'info> {\n    #[account(mut)]\n    pub maker: SystemAccount<'info>,\n    #[account(mut)]\n    pub taker: Signer<'info>,\n\n    pub mint_a: InterfaceAccount<'info, Mint>,\n    pub mint_b: InterfaceAccount<'info, Mint>,\n\n    #[account(mut, associated_token::mint = mint_a, associated_token::authority = maker)]\n    pub maker_ata_a: InterfaceAccount<'info, TokenAccount>,\n    #[account(init_if_needed, payer = taker, associated_token::mint = mint_b, associated_token::authority = maker)]\n    pub maker_ata_b: InterfaceAccount<'info, TokenAccount>,\n\n    #[account(init_if_needed, payer = taker, associated_token::mint = mint_a, associated_token::authority = taker)]\n    pub taker_ata_a: InterfaceAccount<'info, TokenAccount>,\n    #[account(mut, associated_token::mint = mint_b, associated_token::authority = taker)]\n    pub taker_ata_b: InterfaceAccount<'info, TokenAccount>,\n\n    #[account(\n        mut,\n        seeds = [\n            b\"escrow\",\n            escrow.maker.as_ref(),\n            escrow.seed.to_le_bytes().as_ref()\n        ],\n        bump = escrow.escrow_bump\n    )]\n    pub escrow: Account<'info, Escrow>,\n\n    pub vault: InterfaceAccount<'info, TokenAccount>,\n    pub system_program: Program<'info, System>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    pub token_program: Interface<'info, TokenInterface>,\n}",
    "comments": "// This struct is an anchor context that holds necessary accounts for cancel instructions",
    "dependencies": ["Escrow", "derive", "instruction"],
    "line_numbers": [10, 45],
    "docstring": "a cancel anchor Context to cancel an escrow contract and and return tokens from Escrow PDA back into the maker associated token accounts then close the accounts",
    "related_functions": []
  },
  {
    "id": "anchor_011",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "cancel.rs",
    "code_snippet": "pub fn withdraw_from_vault(&mut self) -> Result<()> {\n        let accounts = TransferChecked {\n            from: self.vault.to_account_info(),\n            mint: self.mint_a.to_account_info(),\n            to: self.taker_ata_a.to_account_info(),\n            authority: self.escrow.to_account_info(),\n        };\n\n        let escrow_seed = self.escrow.seed.to_le_bytes();\n        let seeds = [\n            b\"escrow\",\n            self.escrow.maker.as_ref(),\n            escrow_seed.as_ref(),\n            &[self.escrow.escrow_bump],\n        ];\n        let signer_seeds: &[&[&[u8]]] = &[&seeds[..]];\n\n        let ctx = CpiContext::new_with_signer(\n            self.system_program.to_account_info(),\n            accounts,\n            signer_seeds,\n        );\n\n        transfer_checked(ctx, self.escrow.recieve_amount, self.mint_a.decimals)?;\n        Ok(())\n    }",
    "comments": "// This function returns mint_a tokens from escrow vault back into the maker ata",
    "dependencies": [
      "Cancel",
      "transfer_checked",
      "CpiContext::new_with_signer",
      "TransferChecked"
    ],
    "line_numbers": [45, 68],
    "docstring": "Return spl or token22 tokens from PDA owned token account interface to user ata.",
    "related_functions": ["close_vault"]
  },
  {
    "id": "anchor_012",
    "language": "anchor",
    "project": "escrow_program",
    "source": "github",
    "filename": "cancel.rs",
    "code_snippet": "pub fn close_vault(&self) -> Result<()> {\n        let cpi_accounts = CloseAccount {\n            account: self.vault.to_account_info(),\n            destination: self.taker.to_account_info(),\n            authority: self.escrow.to_account_info(),\n        };\n\n        // use binding to prevent temporary value from being dropped\n        let maker_key = self.maker.key();\n        // use binding to prevent temporary value from being dropped\n        let escrow_seed = self.escrow.seed.to_le_bytes();\n\n        let signer_seeds = &[\n            b\"escrow\",\n            maker_key.as_ref(),\n            escrow_seed.as_ref(),\n            &[self.escrow.escrow_bump],\n        ];\n        let binding = [&signer_seeds[..]];\n\n        let ctx = CpiContext::new_with_signer(\n            self.token_program.to_account_info(),\n            cpi_accounts,\n            &binding,\n        );\n\n        close_account(ctx)\n    }",
    "comments": "// This function closes a PDA owned token account interface",
    "dependencies": [
      "Cancel",
      "close_account",
      "CpiContext::new_with_signer",
      "CloseAccount"
    ],
    "line_numbers": [69, 98],
    "docstring": "Close PDA owned token account",
    "related_functions": ["withdraw_from_vault"]
  }
]
